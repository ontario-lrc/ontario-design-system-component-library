{"file":"validation-functions.js","mappings":"SAEgB,kBAAkB,CAAC,QAA8B;;IAEhE,MAAM,eAAe,GAAG,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,EAAE,CAAC;;IAGxE,OAAO,eAAe,CAAC;AACxB,CAAC;SAae,oBAAoB,CAAC,QAAgB;;IAEpD,MAAM,eAAe,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC;;IAGrD,OAAO,eAAe,CAAC;AACxB,CAAC;AAED;;;;;;SAMgB,yBAAyB,CAAmB,KAAQ,EAAE,IAA2B;IAChG,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;SAEe,gBAAgB,CAAC,QAAoD;IACpF,IAAI,QAAQ,EAAE;QACb,MAAM,eAAe,GAAG,OAAO,QAAQ,KAAK,QAAQ,GAAG,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClF,IAAI,eAAe,KAAK,eAAe,KAAK,IAAI,IAAI,eAAe,KAAK,IAAI,CAAC;YAAE,OAAO,eAAe,CAAC;;YACjG,OAAO,IAAI,CAAC;KACjB;IAED,OAAO,IAAI,CAAC;AACb;;;;","names":[],"sources":["src/utils/validation/validation-functions.ts"],"sourcesContent":["import { Language } from '../common/language-types';\n\nexport function validatePropExists(newValue: string | HTMLElement): boolean {\n\t// Check if new value that is passed in is a string and is not empty\n\tconst isNewValueBlank = typeof newValue !== 'string' || newValue === '';\n\n\t// Return true if new value is both a string and is not empty\n\treturn isNewValueBlank;\n}\n\n/**\n * Validate value against enumType\n * T must extends String to gain access to the `toLowerCase()` function\n * @param value value to be compared against enumType\n * @param enumType list of enum values provided by caller\n * @returns enum value if a match is found or undefined if no matches are found\n */\nexport function validateValueAgainstEnum<T extends String, E extends Object>(value: T, enumType: E): T {\n\treturn Object.values(enumType).find((type) => type === value.toLowerCase());\n}\n\nexport function validateObjectExists(newValue: object): boolean {\n\t// Check if new value that is passed in is a string and is not empty\n\tconst isNewValueBlank = typeof newValue !== 'object';\n\n\t// Return true if new value is both a string and is not empty\n\treturn isNewValueBlank;\n}\n\n/**\n * Validate value against keys\n * @param value value to be compared against keys\n * @param keys of values provided by caller\n * @returns true if a match is found or false if no matches are found\n */\nexport function validateValueAgainstArray<T extends string>(value: T, keys: ReadonlyArray<string>): boolean {\n\treturn keys.includes(value);\n}\n\nexport function validateLanguage(language: CustomEvent<Language> | string | undefined) {\n\tif (language) {\n\t\tconst toggledLanguage = typeof language !== 'string' ? language.detail : language;\n\t\tif (toggledLanguage && (toggledLanguage === 'en' || toggledLanguage === 'fr')) return toggledLanguage;\n\t\telse return 'en';\n\t}\n\n\treturn 'en';\n}\n"],"version":3}