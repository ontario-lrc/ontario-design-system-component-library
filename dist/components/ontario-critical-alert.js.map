{"file":"ontario-critical-alert.js","mappings":";;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,osuBAAosuB,CAAC;AACruuB,mCAAe,uBAAuB;;MCYzBA,sBAAoB;;;;;;;;;;;;;;IAyBhC,4BAA4B,CAAC,QAA8B;;QAE1D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YAC3B,IAAI,kBAAkB,CAAC,QAAQ,CAAC,EAAE;;;;gBAIjC,MAAM,OAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;gBAC1C,OAAO;qBACL,kBAAkB,EAAE;qBACpB,gBAAgB,CAAC,WAAW,CAAC;qBAC7B,cAAc,CAAC,KAAK,CAAC;qBACrB,gBAAgB,CAAC,4BAA4B,CAAC;qBAC9C,cAAc,CAAC,mBAAmB,CAAC;qBACnC,YAAY,EAAE,CAAC;aACjB;SACD;KACD;IAEO,aAAa;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE7B,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAChC,OAAO,OAAO,CAAC;SACf;QAED,OAAO,eAAQ,CAAC;KAChB;IAED,iBAAiB;QAChB,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAChD;IAED,MAAM;QACL,QACC,4DAAK,KAAK,EAAC,wBAAwB,IAClC,4DAAK,KAAK,EAAC,aAAa,IACvB,4DAAK,KAAK,EAAC,iCAAiC,IAC3C,4DAAK,KAAK,EAAC,8BAA8B,IACxC,4DAAK,KAAK,EAAC,8BAA8B,EAAC,SAAS,EAAE,+BAA+B,GAAQ,EAC5F,4DAAI,IAAI,CAAC,aAAa,EAAE,CAAK,CACxB,CACD,CACD,CACD,EACL;KACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["OntarioCriticalAlert"],"sources":["src/components/ontario-critical-alert/ontario-critical-alert.scss?tag=ontario-critical-alert&encapsulation=shadow","src/components/ontario-critical-alert/ontario-critical-alert.tsx"],"sourcesContent":["@use '@ontario-lrc/ontario-design-system-global-styles/dist/styles/scss/1-variables/spacing.variables' as spacing;\n@use '@ontario-lrc/ontario-design-system-global-styles/dist/styles/scss/1-variables/colours.variables' as colours;\n@use '@ontario-lrc/ontario-design-system-global-styles/dist/styles/scss/1-variables/font-weights.variables' as fontWeights;\n@use '../../styles/grid.scss';\n\n$ontario-critical-alert-icon-size: 28px;\n$ontario-critical-alert-z-index: 10;\n$ontario-critical-alert-svg-margin--custom: 0.85rem;\n$ontario-critical-alert-line-height: 1.8;\n\n.ontario-critical-alert {\n\tbackground-color: colours.$ontario-colour-warning;\n\tfont-weight: fontWeights.$ontario-font-weights-normal;\n\tmargin: spacing.$spacing-0;\n\tpadding: spacing.$spacing-4 spacing.$spacing-0;\n\tposition: relative;\n\tz-index: $ontario-critical-alert-z-index;\n}\n\n.ontario-critical-alert__body {\n\tdisplay: flex;\n\tflex-wrap: nowrap;\n}\n\n.ontario-critical-alert__icon {\n\tdisplay: flex;\n\n\tsvg {\n\t\twidth: $ontario-critical-alert-icon-size;\n\t\theight: $ontario-critical-alert-icon-size;\n\t\tmargin: spacing.$spacing-0 $ontario-critical-alert-svg-margin--custom spacing.$spacing-0 spacing.$spacing-0;\n\t}\n}\n\n.ontario-critical-alert p {\n\tmargin: spacing.$spacing-0;\n\tpadding: spacing.$spacing-0;\n\tline-height: $ontario-critical-alert-line-height;\n}\n\n.ontario-critical-alert a {\n\tcolor: colours.$ontario-colour-black;\n\tfont-weight: fontWeights.$ontario-font-weights-bold;\n\n\t&:hover,\n\t&:focus {\n\t\ttext-decoration: none;\n\t}\n\n\t&:visited {\n\t\tcolor: colours.$ontario-colour-black;\n\t}\n}\n\n// Slotted content styles\n.ontario-critical-alert ::slotted(a) {\n\tcolor: colours.$ontario-colour-black !important;\n\tfont-weight: fontWeights.$ontario-font-weights-bold;\n}\n\n.ontario-critical-alert ::slotted(a:hover),\n.ontario-critical-alert ::slotted(a:focus) {\n\ttext-decoration: none !important;\n}\n\n.ontario-critical-alert ::slotted(a:visited) {\n\tcolor: colours.$ontario-colour-black;\n}\n","import { Component, h, Prop, Watch, Element } from '@stencil/core';\n\nimport { CriticalAlert } from './ontario-critical-alert.interface';\nimport OntarioIconCriticalAlertWarning from '../ontario-icon/assets/ontario-icon-critical-alert-warning.svg';\n\nimport { validatePropExists } from '../../utils/validation/validation-functions';\nimport { ConsoleMessageClass } from '../../utils/console-message/console-message';\n\n@Component({\n\ttag: 'ontario-critical-alert',\n\tstyleUrl: 'ontario-critical-alert.scss',\n\tshadow: true,\n})\nexport class OntarioCriticalAlert implements CriticalAlert {\n\t@Element() host: HTMLElement;\n\n\t/**\n\t * Content for critical alert message. It can be either string or HTML content. The content is already wrapped in a paragraph tag, so if using HTML content, the paragraph tag can be ommitted.\n\t *\n\t * @example\n\t * <ontario-critical-alert content=\"COVID-19 State of emergency extended until May 12, 2020.\"></ontario-critical-alert>\n\t *\n\t * or\n\t *\n\t * <ontario-critical-alert>\n\t *  <a href=\"#\">COVID-19 State of emergency</a> extended until May 12, 2020.\n\t * </ontario-critical-alert>\n\t */\n\t@Prop() content: string | HTMLElement;\n\n\t/**\n\t * Watch for changes to the `content` prop value.\n\t *\n\t * If no `content` prop was passed, or no host element textContent exists, a warning message will be printed.\n\t *\n\t * @param newValue string | HTMLElement\n\t */\n\t@Watch('content')\n\tvalidateCriticalAlertContent(newValue: string | HTMLElement) {\n\t\t// if no slot is passed, run the `validatePropExists` function\n\t\tif (!this.host.textContent) {\n\t\t\tif (validatePropExists(newValue)) {\n\t\t\t\t/**\n\t\t\t\t * Print the quote warning message\n\t\t\t\t */\n\t\t\t\tconst message = new ConsoleMessageClass();\n\t\t\t\tmessage\n\t\t\t\t\t.addDesignSystemTag()\n\t\t\t\t\t.addMonospaceText(' content ')\n\t\t\t\t\t.addRegularText('for')\n\t\t\t\t\t.addMonospaceText(' <ontario-critical-alert> ')\n\t\t\t\t\t.addRegularText('was not provided.')\n\t\t\t\t\t.printMessage();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderContent() {\n\t\tconst content = this.content;\n\n\t\tif (typeof content === 'string') {\n\t\t\treturn content;\n\t\t}\n\n\t\treturn <slot />;\n\t}\n\n\tcomponentWillLoad() {\n\t\tthis.validateCriticalAlertContent(this.content);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div class=\"ontario-critical-alert\">\n\t\t\t\t<div class=\"ontario-row\">\n\t\t\t\t\t<div class=\"ontario-column ontario-small-12\">\n\t\t\t\t\t\t<div class=\"ontario-critical-alert__body\">\n\t\t\t\t\t\t\t<div class=\"ontario-critical-alert__icon\" innerHTML={OntarioIconCriticalAlertWarning}></div>\n\t\t\t\t\t\t\t<p>{this.renderContent()}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n"],"version":3}