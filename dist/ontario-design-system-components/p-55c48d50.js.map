{"version":3,"names":["ConsoleType","MessageStyle","designSystemTag","fontSize","tagStyles","join","regularTextStyles","monospaceTextStyles","addSpecifier","message","styleSpecifier","concat","ConsoleMessageClass","constructor","this","styles","addDesignSystemTag","push","addRegularText","text","addText","addMonospaceText","printMessage","consoleType","Warning","messageArray","Error","console","error","apply","Info","info","warn","log","style","trim","length"],"sources":["src/utils/console-message/console-message.enum.ts","src/utils/console-message/console-message.ts"],"sourcesContent":["export enum ConsoleType {\n\tError = 'error',\n\tInfo = 'info',\n\tLog = 'log',\n\tWarning = 'warning',\n}\n\nexport enum MessageStyle {\n\tRegular = 'regular',\n\tCode = 'code',\n}\n","import { ConsoleMessage } from './console-message.interface';\nimport { ConsoleType, MessageStyle } from './console-message.enum';\n\n// system tag with formatting specifier\nconst designSystemTag = 'Ontario Design System';\n\n// default font size for console messages\nconst fontSize = '12px';\n\n// styles for the system tag in a string format\n// the `background-color`, `color`, `padding` and `border-radius` values are hardcoded because\n// they are specific for console message use case\nconst tagStyles = [\n\t'background-color: #367A76',\n\t'border: none',\n\t'color: white',\n\t'padding: 2px 5px',\n\t'text-align: center',\n\t'text-decoration: none',\n\t'display: inline-block',\n\t'cursor: pointer',\n\t'border-radius: 5px',\n].join(';');\n\n// styles for regular text in string format\nconst regularTextStyles = ['font-family: sans-serif', `font-size: ${fontSize}`].join(';');\n\n// styles for code in string format\nconst monospaceTextStyles = ['font-family: monospace', `font-size: ${fontSize}`].join(';');\n\nfunction addSpecifier(message: string): string {\n\tconst styleSpecifier = '%c';\n\treturn styleSpecifier.concat(message);\n}\n\n// print message to console depending on the `ConsoleType`\nexport function printConsoleMessage(\n\tmessages: ConsoleMessage[] | string,\n\tconsoleType = ConsoleType.Warning,\n\thasDesignSystemTag = true,\n) {\n\t// retrieve message from each object and concatenate them into one single string in order\n\t// if `hasSystemTag` is true then the message string will being with the value stored within `designSystemTag`.\n\tconst message =\n\t\ttypeof messages === 'string' // Note the TypeScript transpiler Stencil is using doesn't like this type guard as a const.\n\t\t\t? `${addSpecifier(designSystemTag)}${addSpecifier(` ${messages}`)}`\n\t\t\t: messages?.reduce(\n\t\t\t\t\t(message: string, currentObject: ConsoleMessage) => (message += addSpecifier(currentObject.message) ?? ''),\n\t\t\t\t\thasDesignSystemTag ? addSpecifier(designSystemTag) : '',\n\t\t\t  );\n\n\t// array of arguments to be passed into the the console function\n\tconst messageArray: string[] = [];\n\n\t// push message into the array of arguments\n\t// depending on whether the system tag is used (i.e. `hasSystemTag` is true), push `tagStyles` into the array\n\tif (hasDesignSystemTag) {\n\t\tmessageArray.push(message, tagStyles);\n\t} else {\n\t\tmessageArray.push(message);\n\t}\n\n\t// Note the TypeScript transpiler Stencil is using doesn't like this type guard as a const.\n\tif (typeof messages === 'string') {\n\t\tmessageArray.push(regularTextStyles);\n\t} else {\n\t\t// push style of each message into the array of arguments in order\n\t\tmessages?.forEach((message: ConsoleMessage) => {\n\t\t\tmessageArray.push(message.style && message.style === MessageStyle.Code ? monospaceTextStyles : regularTextStyles);\n\t\t});\n\t}\n\n\t// pass array of arguments into the console function for printing depending on `consoleType`\n\t// the `function.apply()` function handles array of arguments which allows list of arguments to be set programmatically\n\tswitch (consoleType) {\n\t\tcase ConsoleType.Error:\n\t\t\treturn console.error.apply(null, messageArray);\n\n\t\tcase ConsoleType.Info:\n\t\t\treturn console.info.apply(null, messageArray);\n\n\t\tcase ConsoleType.Warning:\n\t\t\treturn console.warn.apply(null, messageArray);\n\n\t\tdefault:\n\t\t\treturn console.log.apply(null, messageArray);\n\t}\n}\n\n// build and print console message with a fluent interface design\nexport class ConsoleMessageClass {\n\tmessage: string;\n\tstyles: string[];\n\n\tconstructor() {\n\t\tthis.message = '';\n\t\tthis.styles = [];\n\t}\n\n\t// add the `Ontario Design System` tag to the beginning of the message\n\t// the first call in the chain if a tag is required\n\taddDesignSystemTag() {\n\t\tthis.message = addSpecifier(designSystemTag);\n\t\tthis.styles.push(tagStyles);\n\t\treturn this;\n\t}\n\n\t// build console message as regular text\n\taddRegularText(text: string) {\n\t\tthis.addText(text, regularTextStyles);\n\t\treturn this;\n\t}\n\n\t// build console message as monospace text\n\taddMonospaceText(text: string) {\n\t\tthis.addText(text, monospaceTextStyles);\n\t\treturn this;\n\t}\n\n\t// print message to console depending on the `ConsoleType`\n\t// the last function call in the chain\n\tprintMessage(consoleType = ConsoleType.Warning) {\n\t\tconst messageArray = [this.message, ...this.styles];\n\n\t\t// pass array of arguments into the console function for printing depending on `consoleType`\n\t\t// the `function.apply()` function handles array of arguments which allows list of arguments to be set programmatically\n\t\tswitch (consoleType) {\n\t\t\tcase ConsoleType.Error:\n\t\t\t\tconsole.error.apply(null, messageArray);\n\t\t\t\tbreak;\n\t\t\tcase ConsoleType.Info:\n\t\t\t\tconsole.info.apply(null, messageArray);\n\t\t\t\tbreak;\n\t\t\tcase ConsoleType.Warning:\n\t\t\t\tconsole.warn.apply(null, messageArray);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log.apply(null, messageArray);\n\t\t}\n\t}\n\n\t// add text to the `message` property and associated styles into the `styles` array\n\tprivate addText(text: string, style: string) {\n\t\tif (text && text?.trim().length > 0) {\n\t\t\tthis.message += addSpecifier(text);\n\t\t\tthis.styles.push(style);\n\t\t}\n\t}\n}\n"],"mappings":"IAAYA,GAAZ,SAAYA,GACXA,EAAA,iBACAA,EAAA,eACAA,EAAA,aACAA,EAAA,oBACA,EALD,CAAYA,MAAW,KAOvB,IAAYC,GAAZ,SAAYA,GACXA,EAAA,qBACAA,EAAA,cACA,EAHD,CAAYA,MAAY,KCHxB,MAAMC,EAAkB,wBAGxB,MAAMC,EAAW,OAKjB,MAAMC,EAAY,CACjB,4BACA,eACA,eACA,mBACA,qBACA,wBACA,wBACA,kBACA,sBACCC,KAAK,KAGP,MAAMC,EAAoB,CAAC,0BAA2B,cAAcH,KAAYE,KAAK,KAGrF,MAAME,EAAsB,CAAC,yBAA0B,cAAcJ,KAAYE,KAAK,KAEtF,SAASG,EAAaC,GACrB,MAAMC,EAAiB,KACvB,OAAOA,EAAeC,OAAOF,EAC9B,C,MAyDaG,EAIZ,WAAAC,GACCC,KAAKL,QAAU,GACfK,KAAKC,OAAS,E,CAKf,kBAAAC,GACCF,KAAKL,QAAUD,EAAaN,GAC5BY,KAAKC,OAAOE,KAAKb,GACjB,OAAOU,I,CAIR,cAAAI,CAAeC,GACdL,KAAKM,QAAQD,EAAMb,GACnB,OAAOQ,I,CAIR,gBAAAO,CAAiBF,GAChBL,KAAKM,QAAQD,EAAMZ,GACnB,OAAOO,I,CAKR,YAAAQ,CAAaC,EAAcvB,EAAYwB,SACtC,MAAMC,EAAe,CAACX,KAAKL,WAAYK,KAAKC,QAI5C,OAAQQ,GACP,KAAKvB,EAAY0B,MAChBC,QAAQC,MAAMC,MAAM,KAAMJ,GAC1B,MACD,KAAKzB,EAAY8B,KAChBH,QAAQI,KAAKF,MAAM,KAAMJ,GACzB,MACD,KAAKzB,EAAYwB,QAChBG,QAAQK,KAAKH,MAAM,KAAMJ,GACzB,MACD,QACCE,QAAQM,IAAIJ,MAAM,KAAMJ,G,CAKnB,OAAAL,CAAQD,EAAce,GAC7B,GAAIf,IAAQA,IAAI,MAAJA,SAAI,SAAJA,EAAMgB,OAAOC,QAAS,EAAG,CACpCtB,KAAKL,SAAWD,EAAaW,GAC7BL,KAAKC,OAAOE,KAAKiB,E"}