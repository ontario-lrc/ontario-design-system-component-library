{"version":3,"file":"ontario-loading-indicator.e2e.js","sourceRoot":"","sources":["../../../../src/components/ontario-loading-indicator/test/ontario-loading-indicator.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('ontario-loading-indicator', () => {\n\tit('should be hidden on page load', async () => {\n\t\tconst page = await newE2EPage();\n\t\tawait page.setContent('<ontario-loading-indicator></ontario-loading-indicator>');\n\t\tconst element = await page.find('ontario-loading-indicator >>> div');\n\n\t\tconst styles = await element.getComputedStyle();\n\t\tconst ariaHiddenValue = element.getAttribute('aria-hidden');\n\n\t\texpect(styles.display).toBe('none');\n\t\texpect(ariaHiddenValue).toBe('true');\n\t});\n\n\tit('should be visible when the `isLoading` prop is set to true', async () => {\n\t\tconst page = await newE2EPage();\n\t\tawait page.setContent('<ontario-loading-indicator is-loading=\"true\"></ontario-loading-indicator>');\n\t\tconst element = await page.find('ontario-loading-indicator >>> div');\n\n\t\tconst styles = await element.getComputedStyle();\n\t\tconst ariaHiddenValue = element.getAttribute('aria-hidden');\n\n\t\texpect(styles.display).toBe('block');\n\t\texpect(ariaHiddenValue).toBe('false');\n\t});\n\n\tit('should have a `fullScreenOverlay` value of true when none is explicitly set', async () => {\n\t\tconst page = await newE2EPage();\n\t\tawait page.setContent('<ontario-loading-indicator is-loading=\"true\"></ontario-loading-indicator>');\n\t\tconst component = await page.find('ontario-loading-indicator');\n\t\tconst element = await page.find('ontario-loading-indicator >>> div');\n\n\t\tconst styles = await element.getComputedStyle();\n\t\tconst fullScreenValue = await component.getProperty('fullScreenOverlay');\n\n\t\texpect(fullScreenValue).toBe(true);\n\t\texpect(styles.position).toBe('fixed');\n\t});\n\n\tit('should update the overlay styles and value with the `fullScreenOverlay` prop is set to false', async () => {\n\t\tconst page = await newE2EPage();\n\t\tawait page.setContent(\n\t\t\t'<ontario-loading-indicator is-loading=\"true\" full-screen-overlay=\"false\"></ontario-loading-indicator>',\n\t\t);\n\t\tconst component = await page.find('ontario-loading-indicator');\n\t\tconst element = await page.find('ontario-loading-indicator >>> div');\n\n\t\tconst styles = await element.getComputedStyle();\n\t\tconst fullScreenValue = await component.getProperty('fullScreenOverlay');\n\n\t\texpect(fullScreenValue).toBe(false);\n\t\texpect(styles.position).toBe('absolute');\n\t});\n\n\tit('should render the default \"Loading\" content when no `message` prop is passed', async () => {\n\t\tconst page = await newE2EPage();\n\t\tawait page.setContent('<ontario-loading-indicator></ontario-loading-indicator>');\n\t\tconst element = await page.find('ontario-loading-indicator >>> div');\n\n\t\texpect(element.textContent).toEqual('Loading');\n\t});\n\n\tit('should update the content when the `message` prop is updated', async () => {\n\t\tconst page = await newE2EPage();\n\t\tawait page.setContent('<ontario-loading-indicator></ontario-loading-indicator>');\n\t\tconst component = await page.find('ontario-loading-indicator');\n\t\tconst element = await page.find('ontario-loading-indicator >>> div');\n\n\t\tcomponent.setAttribute('message', 'Data incoming...');\n\t\tawait page.waitForChanges();\n\n\t\texpect(element.textContent).toEqual('Data incoming...');\n\t});\n});\n"]}