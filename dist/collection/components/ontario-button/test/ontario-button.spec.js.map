{"version":3,"file":"ontario-button.spec.js","sourceRoot":"","sources":["../../../../src/components/ontario-button/test/ontario-button.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,oBAAoB,EAAE,MAAM,6CAA6C,CAAC;AAEnF,MAAM,CAAC,gBAAgB,GAAG,oBAAoB,CAAC;AAE/C,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;IAC/C,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;QAC9B,UAAU,EAAE,CAAC,aAAa,CAAC;QAC3B,IAAI,EAAE,kDAAkD;KACxD,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;GAS5B,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;IACtD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;QAC9B,UAAU,EAAE,CAAC,aAAa,CAAC;QAC3B,IAAI,EAAE,oFAAoF;KAC1F,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;GAS5B,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;IACzF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;QAC9B,UAAU,EAAE,CAAC,aAAa,CAAC;QAC3B,IAAI,EAAE,gEAAgE;KACtE,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;GAS5B,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;IACpG,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;QAC9B,UAAU,EAAE,CAAC,aAAa,CAAC;QAC3B,IAAI,EAAE,+EAA+E;KACrF,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;GAS5B,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;IACpF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;QAC9B,UAAU,EAAE,CAAC,aAAa,CAAC;QAC3B,IAAI,EAAE,6EAA6E;KACnF,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;GAS5B,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { OntarioButton } from '../ontario-button';\nimport { mutationObserverMock } from '../../../utils/tests/mutation-observer.mock';\n\nglobal.MutationObserver = mutationObserverMock;\n\nit('should render a default button', async () => {\n\tconst page = await newSpecPage({\n\t\tcomponents: [OntarioButton],\n\t\thtml: `<ontario-button>Element Content</ontario-button>`,\n\t});\n\texpect(page.root).toEqualHtml(`\n    <ontario-button>\n      <mock:shadow-root>\n        <button aria-label=\"Element Content\" class=\"ontario-button ontario-button--secondary\" type=\"button\">\n          Element Content\n        </button>\n      </mock:shadow-root>\n      Element Content\n    </ontario-button>\n  `);\n});\n\nit('should render a primary submit button', async () => {\n\tconst page = await newSpecPage({\n\t\tcomponents: [OntarioButton],\n\t\thtml: `<ontario-button type=\"primary\" html-type=\"submit\">Element Content</ontario-button>`,\n\t});\n\texpect(page.root).toEqualHtml(`\n    <ontario-button type=\"primary\" html-type=\"submit\">\n      <mock:shadow-root>\n        <button aria-label=\"Element Content\" class=\"ontario-button ontario-button--primary\" type=\"submit\">\n          Element Content\n        </button>\n      </mock:shadow-root>\n      Element Content\n    </ontario-button>\n  `);\n});\n\nit('should render a default button with label overriding the element content', async () => {\n\tconst page = await newSpecPage({\n\t\tcomponents: [OntarioButton],\n\t\thtml: `<ontario-button label=\"Label\">Element Content</ontario-button>`,\n\t});\n\texpect(page.root).toEqualHtml(`\n    <ontario-button label=\"Label\">\n      <mock:shadow-root>\n        <button aria-label=\"Label\" class=\"ontario-button ontario-button--secondary\" type=\"button\">\n          Label\n        </button>\n      </mock:shadow-root>\n      Element Content\n    </ontario-button>\n  `);\n});\n\nit('should render a default button with the aria-label-text attribute being overwritten', async () => {\n\tconst page = await newSpecPage({\n\t\tcomponents: [OntarioButton],\n\t\thtml: `<ontario-button aria-label-text=\"Aria Label\">Element Content</ontario-button>`,\n\t});\n\texpect(page.root).toEqualHtml(`\n    <ontario-button aria-label-text=\"Aria Label\">\n      <mock:shadow-root>\n        <button aria-label=\"Aria Label\" class=\"ontario-button ontario-button--secondary\" type=\"button\">\n          Element Content\n        </button>\n      </mock:shadow-root>\n      Element Content\n    </ontario-button>\n  `);\n});\n\nit('should render a default button with an id being explicity specified', async () => {\n\tconst page = await newSpecPage({\n\t\tcomponents: [OntarioButton],\n\t\thtml: `<ontario-button element-id=\"DefaultButton\">Element Content</ontario-button>`,\n\t});\n\texpect(page.root).toEqualHtml(`\n    <ontario-button element-id=\"DefaultButton\">\n      <mock:shadow-root>\n        <button aria-label=\"Element Content\" class=\"ontario-button ontario-button--secondary\" type=\"button\" id=\"DefaultButton\">\n          Element Content\n        </button>\n      </mock:shadow-root>\n      Element Content\n    </ontario-button>\n  `);\n});\n"]}