{"version":3,"file":"ontario-blockquote.spec.js","sourceRoot":"","sources":["../../../../src/components/ontario-blockquote/test/ontario-blockquote.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,oBAAoB,EAAE,MAAM,6CAA6C,CAAC;AAEnF,MAAM,CAAC,gBAAgB,GAAG,oBAAoB,CAAC;AAE/C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IACnC,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC9B,UAAU,EAAE,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,mGAAmG;aACzG,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC9B,UAAU,EAAE,CAAC,iBAAiB,CAAC;YAC/B,IAAI,EAAE,6HAA6H;SACnI,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;KAW3B,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC9B,UAAU,EAAE,CAAC,iBAAiB,CAAC;YAC/B,IAAI,EAAE,0IAA0I;SAChJ,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QACnE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC3D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;QAChG,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC9B,UAAU,EAAE,CAAC,iBAAiB,CAAC;YAC/B,IAAI,EAAE,0IAA0I;SAChJ,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;QAChG,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC9B,UAAU,EAAE,CAAC,iBAAiB,CAAC;YAC/B,IAAI,EAAE,wQAAwQ;SAC9Q,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { OntarioBlockquote } from '../ontario-blockquote';\nimport { mutationObserverMock } from '../../../utils/tests/mutation-observer.mock';\n\nglobal.MutationObserver = mutationObserverMock;\n\ndescribe('ontario-blockquote', () => {\n\tdescribe('snapshot', () => {\n\t\tit('should render the expected html', async () => {\n\t\t\tconst page = await newSpecPage({\n\t\t\t\tcomponents: [OntarioBlockquote],\n\t\t\t\thtml: `<ontario-blockquote quote=\"This is a test quote\" attribution=\"DS Tech Team\"></ontario-blockquote>`,\n\t\t\t});\n\n\t\t\texpect(page.root).toMatchSnapshot();\n\t\t});\n\t});\n\n\tit('should render a byline when the byline prop is passed', async () => {\n\t\tconst page = await newSpecPage({\n\t\t\tcomponents: [OntarioBlockquote],\n\t\t\thtml: `<ontario-blockquote attribution=\"DS Tech Team\" byline=\"The best team at the ODS!\">This is a test quote</ontario-blockquote>`,\n\t\t});\n\t\texpect(page.root).toEqualHtml(`\n      <ontario-blockquote attribution=\"DS Tech Team\" byline=\"The best team at the ODS!\">\n        <mock:shadow-root>\n          <blockquote class=\"ontario-blockquote ontario-blockquote--short\">\n\t\t\t\t\t\t<p>This is a test quote</p>\n\t\t\t\t\t\t<cite class=\"ontario-blockquote__attribution\">DS Tech Team</cite>\n\t\t\t\t\t\t<cite class=\"ontario-blockquote__byline\">The best team at the ODS!</cite>\n\t\t\t\t\t</blockquote>\n        </mock:shadow-root>\n\t\t\t\tThis is a test quote\n      </ontario-blockquote>\n    `);\n\t});\n\n\tit('should reflect attributes/props being set', async () => {\n\t\tconst page = await newSpecPage({\n\t\t\tcomponents: [OntarioBlockquote],\n\t\t\thtml: `<ontario-blockquote quote=\"This is another test quote\" attribution=\"DS Tech Team\" byline=\"Ontario Digital Service\"></ontario-blockquote>`,\n\t\t});\n\n\t\texpect(page.rootInstance.quote).toBe('This is another test quote');\n\t\texpect(page.rootInstance.attribution).toBe('DS Tech Team');\n\t\texpect(page.rootInstance.byline).toBe('Ontario Digital Service');\n\t});\n\n\tit('should set the shortQuote state to `true` when the character count is under 140', async () => {\n\t\tconst page = await newSpecPage({\n\t\t\tcomponents: [OntarioBlockquote],\n\t\t\thtml: `<ontario-blockquote quote=\"This is another test quote\" attribution=\"DS Tech Team\" byline=\"Ontario Digital Service\"></ontario-blockquote>`,\n\t\t});\n\n\t\texpect(page.rootInstance.shortQuote).toBe(true);\n\t});\n\n\tit('should set the shortQuote state to `false` when the character count is over 140', async () => {\n\t\tconst page = await newSpecPage({\n\t\t\tcomponents: [OntarioBlockquote],\n\t\t\thtml: `<ontario-blockquote attribution=\"Homer Simpson\">I saw this movie about a bus that had to speed around a city, keeping its speed over fifty, and if its speed dropped, it would explode! I think it was called, \"The Bus That Couldnâ€™t Slow Down\".</ontario-blockquote>`,\n\t\t});\n\n\t\texpect(page.rootInstance.shortQuote).toBe(false);\n\t});\n});\n"]}