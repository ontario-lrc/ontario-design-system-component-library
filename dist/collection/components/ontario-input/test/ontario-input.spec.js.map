{"version":3,"file":"ontario-input.spec.js","sourceRoot":"","sources":["../../../../src/components/ontario-input/test/ontario-input.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAEhD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC9B,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC9B,UAAU,EAAE,CAAC,YAAY,CAAC;gBAC1B,IAAI,EAAE,4HAA4H;aAClI,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC9B,UAAU,EAAE,CAAC,YAAY,CAAC;gBAC1B,IAAI,EAAE,4HAA4H;aAClI,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;;;;;;;;;;;;;;;;;;IAkB7B,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC9B,UAAU,EAAE,CAAC,YAAY,CAAC;gBAC1B,IAAI,EAAE;;;;;;;sBAOY;aAClB,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC1D,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC9B,UAAU,EAAE,CAAC,YAAY,CAAC;gBAC1B,IAAI,EAAE;;;sBAGY;aAClB,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC1B,MAAM,gBAAgB,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YACpD,IAAI,CAAC,YAAY,CAAC,WAAW,CAC5B,IAAI,aAAa,CAAC,SAAS,EAAE;gBAC5B,OAAO,EAAE,gBAAgB;aACzB,CAAC,EACF,QAAQ,CACR,CAAC;YACF,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,yEAAyE;QACzE,EAAE,CAAC,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC9B,UAAU,EAAE,CAAC,YAAY,CAAC;gBAC1B,IAAI,EAAE;;;sBAGY;aAClB,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC1B,MAAM,SAAS,GAAG,gBAAgB,CAAC;YACnC,MAAM,gBAAgB,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YACpD,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,SAAS,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,CAAC,YAAY,CAAC,WAAW,CAC5B,IAAI,aAAa,CAAC,SAAS,EAAE;gBAC5B,OAAO,EAAE,gBAAgB;aACzB,CAAC,EACF,QAAQ,CACR,CAAC;YACF,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;gBAC9B,UAAU,EAAE,CAAC,YAAY,CAAC;gBAC1B,IAAI,EAAE;;;sBAGY;aAClB,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { OntarioInput } from '../ontario-input';\n\ndescribe('ontario-input', () => {\n\tdescribe('snapshot', () => {\n\t\tit('should render the expected html', async () => {\n\t\t\tconst page = await newSpecPage({\n\t\t\t\tcomponents: [OntarioInput],\n\t\t\t\thtml: `<ontario-input element-id=\"ontario-input\" caption='{\"captionText\": \"Ontario Input\"}' name=\"ontario-input\"></ontario-input>`,\n\t\t\t});\n\n\t\t\texpect(page.root).toMatchSnapshot();\n\t\t});\n\t});\n\n\tdescribe('render', () => {\n\t\tit('should render a default input element', async () => {\n\t\t\tconst page = await newSpecPage({\n\t\t\t\tcomponents: [OntarioInput],\n\t\t\t\thtml: `<ontario-input element-id=\"ontario-input\" caption='{\"captionText\": \"Ontario Input\"}' name=\"ontario-input\"></ontario-input>`,\n\t\t\t});\n\t\t\texpect(page.root).toEqualHtml(`\n\t\t\t\t<ontario-input element-id=\"ontario-input\" caption='{\"captionText\": \"Ontario Input\"}' name=\"ontario-input\">\n\t\t\t\t\t<mock:shadow-root>\n\t\t\t\t\t\t<div class=\"ontario-form-group\">\n\t\t\t\t\t\t\t<label class=\"ontario-label\" htmlfor=\"ontario-input\">\n\t\t\t\t\t\t\t\tOntario Input\n\t\t\t\t\t\t\t\t<span class=\"ontario-label__flag\">\n\t\t\t\t\t\t\t\t\t(optional)\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div class=\"ontario-error-messaging ontario-error__hidden\" role=\"alert\">\n\t\t\t\t\t\t\t\t<ontario-icon-alert-error></ontario-icon-alert-error>\n\t\t\t\t\t\t\t\t<div class=\"ontario-error-messaging__content\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<input type='text' class=\"ontario-input\" id=\"ontario-input\" name=\"ontario-input\" value=\"\"></input>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</mock:shadow-root>\n\t\t\t\t</ontario-input>\n\t\t\t`);\n\t\t});\n\n\t\tit('should reflect attributes/props being set', async () => {\n\t\t\tconst page = await newSpecPage({\n\t\t\t\tcomponents: [OntarioInput],\n\t\t\t\thtml: `<ontario-input\n\t\t\t\t\tname=\"input-name\"\n\t\t\t\t\telement-id=\"input-id\"\n\t\t\t\t\tvalue=\"input value\"\n\t\t\t\t\ttype='tel'\n\t\t\t\t\tinput-width='7-char-width'\n\t\t\t\t\tcaption='{\"captionText\": \"Ontario Input\"}'\n\t\t\t\t></ontario-input>`,\n\t\t\t});\n\n\t\t\texpect(page.rootInstance.name).toBe('input-name');\n\t\t\texpect(page.rootInstance.value).toBe('input value');\n\t\t\texpect(page.rootInstance.elementId).toBe('input-id');\n\t\t\texpect(page.rootInstance.type).toBe('tel');\n\t\t\texpect(page.rootInstance.inputWidth).toBe('7-char-width');\n\t\t\texpect(page.rootInstance.captionState.captionText).toBe('Ontario Input');\n\t\t});\n\t});\n\n\tdescribe('events/methods', () => {\n\t\tit('should emit a keyboard event on change', async () => {\n\t\t\tconst page = await newSpecPage({\n\t\t\t\tcomponents: [OntarioInput],\n\t\t\t\thtml: `<ontario-input\n\t\t\t\t\tname=\"input-name\"\n\t\t\t\t\telement-id=\"input-id\"\n\t\t\t\t></ontario-input>`,\n\t\t\t});\n\n\t\t\tconst emitSpy = jest.fn();\n\t\t\tconst leftArrowKeyCode = 37;\n\t\t\tpage.doc.addEventListener('inputOnChange', emitSpy);\n\t\t\tpage.rootInstance.handleEvent(\n\t\t\t\tnew KeyboardEvent('keydown', {\n\t\t\t\t\tkeyCode: leftArrowKeyCode,\n\t\t\t\t}),\n\t\t\t\t'change',\n\t\t\t);\n\t\t\tawait page.waitForChanges();\n\t\t\texpect(emitSpy).toHaveBeenCalled();\n\t\t});\n\n\t\t// Note: This is skipped until it can be figured out why it doesn't work.\n\t\tit.skip('should update the input value on a change event', async () => {\n\t\t\tconst page = await newSpecPage({\n\t\t\t\tcomponents: [OntarioInput],\n\t\t\t\thtml: `<ontario-input\n\t\t\t\t\tname=\"input-name\"\n\t\t\t\t\telement-id=\"input-id\"\n\t\t\t\t></ontario-input>`,\n\t\t\t});\n\n\t\t\tconst emitSpy = jest.fn();\n\t\t\tconst testValue = 'This is a test';\n\t\t\tconst leftArrowKeyCode = 37;\n\t\t\tpage.doc.addEventListener('inputOnChange', emitSpy);\n\t\t\tpage.rootInstance.value = testValue;\n\t\t\tconsole.log('value:', page.rootInstance.value);\n\t\t\tpage.rootInstance.handleEvent(\n\t\t\t\tnew KeyboardEvent('keydown', {\n\t\t\t\t\tkeyCode: leftArrowKeyCode,\n\t\t\t\t}),\n\t\t\t\t'change',\n\t\t\t);\n\t\t\tawait page.waitForChanges();\n\t\t\tconsole.log('value2:', page.rootInstance.value);\n\t\t\texpect(emitSpy).toHaveBeenCalled();\n\t\t\texpect(page.rootInstance.value).toBe(testValue);\n\t\t});\n\n\t\tit('should return the input id when using the getId method', async () => {\n\t\t\tconst page = await newSpecPage({\n\t\t\t\tcomponents: [OntarioInput],\n\t\t\t\thtml: `<ontario-input\n\t\t\t\t\tname=\"input-name\"\n\t\t\t\t\telement-id=\"input-id\"\n\t\t\t\t></ontario-input>`,\n\t\t\t});\n\n\t\t\texpect(page.rootInstance.getId()).toEqual('input-id');\n\t\t});\n\t});\n});\n"]}