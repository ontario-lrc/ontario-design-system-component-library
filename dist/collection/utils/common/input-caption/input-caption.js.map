{"version":3,"file":"input-caption.js","sourceRoot":"","sources":["../../../../src/utils/common/input-caption/input-caption.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\nimport { CaptionType, CaptionTypes } from './input-caption.types';\nimport { MessageContentType } from './input-caption.enum';\nimport { CaptionInfo, Caption } from './caption.interface';\nimport { ConsoleMessageClass } from '../../console-message/console-message';\n\nexport class InputCaption implements CaptionInfo {\n\t/**\n\t * The text to display as caption.\n\t */\n\tcaptionText: string;\n\n\t/**\n\t * The type of caption to render.\n\t */\n\tcaptionType?: CaptionType = 'default';\n\n\t/**\n\t * Determine whether the input field is required.\n\t */\n\trequired?: boolean = false;\n\n\t/**\n\t * Determine whether the rendered element is a `<label>` or `<legend>`.\n\t */\n\tisLegend?: boolean = false;\n\n\t/**\n\t * Name of the component instantiating the class.\n\t * This is used for validation warning message.\n\t */\n\tcomponentTagName: string;\n\n\tlanguage: any = 'en';\n\n\ttranslations: any;\n\n\t/**\n\t * Set the class members\n\t * Output a console warning message if the provided `label` type is incorrect\n\t * @param caption object containing the essential data to configure the input label\n\t */\n\tconstructor(\n\t\tcomponentTagName: string,\n\t\tcaption: Caption | string,\n\t\ttranslations: any,\n\t\tlanguage: any,\n\t\tisLegend: boolean = false,\n\t\trequired: boolean = false,\n\t) {\n\t\tlet captionObject: Caption;\n\n\t\tif (typeof caption === 'string') {\n\t\t\ttry {\n\t\t\t\tcaptionObject = JSON.parse(caption) as Caption;\n\t\t\t} catch {\n\t\t\t\tcaptionObject = { captionText: caption, captionType: 'default' };\n\t\t\t}\n\t\t} else {\n\t\t\tcaptionObject = caption;\n\t\t}\n\n\t\tthis.componentTagName = componentTagName.toLocaleLowerCase();\n\t\tthis.captionText = captionObject?.captionText;\n\t\tthis.captionType =\n\t\t\t(captionObject?.captionType && CaptionTypes.find((type) => type === captionObject.captionType?.toLowerCase())) ||\n\t\t\t'default';\n\t\tthis.required = required;\n\t\tthis.isLegend = isLegend;\n\t\tthis.translations = translations;\n\t\tthis.language = language;\n\n\t\tthis.validateCaption(this);\n\t}\n\n\t/**\n\t * Return the `<label>` element for text inputs\n\t * @param captionFor Set the `htmlFor` attribute\n\t * @returns element containing the caption for the input\n\t */\n\tgetCaption = (captionFor?: string | undefined, hasHintExpander: boolean = false): HTMLElement => {\n\t\tconst captionText = this.captionText && this.captionText.toLowerCase();\n\t\tconst captionContent = this.isLegend ? (\n\t\t\t<legend class={this.getClass()}>\n\t\t\t\t{this.captionType === 'heading' ? <h1>{this.captionText}</h1> : this.captionText}\n\t\t\t\t{this.getRequiredFlagElement()}\n\t\t\t\t{hasHintExpander && this.getHintExpanderAccessibilityText(captionText, false)}\n\t\t\t</legend>\n\t\t) : (\n\t\t\t<label htmlFor={captionFor} class={this.getClass()}>\n\t\t\t\t{this.captionText}\n\t\t\t\t{this.getRequiredFlagElement()}\n\t\t\t\t{hasHintExpander && this.getHintExpanderAccessibilityText(captionText, false)}\n\t\t\t</label>\n\t\t);\n\n\t\t// with `this.captionType` already set to one of the enum values, the comparison no longer needs the `toLowerCase()` transform\n\t\treturn this.captionType === 'heading' && !this.isLegend ? <h1>{captionContent}</h1> : captionContent;\n\t};\n\n\tgetHintExpanderAccessibilityText(captionText: string, hasHintExpanderOnOption: boolean = false): HTMLElement {\n\t\tconst multipleOptionsMessage = (\n\t\t\t<span class=\"ontario-show-for-sr\">\n\t\t\t\t{this.translations.accessibility.moreInfo[this.language]} \"{captionText.toLowerCase()}\"{' '}\n\t\t\t\t{this.translations.accessibility.checkboxHintExpander[this.language]}\n\t\t\t</span>\n\t\t);\n\n\t\tconst singleOptionMessage = (\n\t\t\t<span class=\"ontario-show-for-sr\">\n\t\t\t\t{this.translations.accessibility.moreInfo[this.language]} \"{captionText.toLowerCase()}\"{' '}\n\t\t\t\t{this.translations.accessibility.singleHintExpander[this.language]}\n\t\t\t</span>\n\t\t);\n\t\treturn this.componentTagName === 'ontario-checkboxes'\n\t\t\t? !hasHintExpanderOnOption\n\t\t\t\t? multipleOptionsMessage\n\t\t\t\t: singleOptionMessage\n\t\t\t: singleOptionMessage;\n\t}\n\n\t/**\n\t * Determines which flag text to use between `required` and `optional`\n\t * @returns `required` or `optional` flag text\n\t */\n\tprivate getRequiredFlagText(): string {\n\t\treturn this.required\n\t\t\t? this.translations && `(${this.translations.required[this.language]})`\n\t\t\t: this.translations && `(${this.translations.optional[this.language]})`;\n\t}\n\n\t/**\n\t * Get the HTML for the required/optional flag.\n\t * @returns CSS class for the label/legend.\n\t */\n\tprivate getRequiredFlagElement(): HTMLElement {\n\t\treturn <span class=\"ontario-label__flag\">{this.getRequiredFlagText()}</span>;\n\t}\n\n\t/**\n\t * Get the CSS class for the `label` element.\n\t * @returns CSS class for the `label` element.\n\t */\n\tprivate getClass(): string {\n\t\treturn this.captionType === 'large' || this.captionType === 'heading'\n\t\t\t? this.isLegend\n\t\t\t\t? `ontario-fieldset__legend ontario-fieldset__legend--${this.captionType}`\n\t\t\t\t: `ontario-label ontario-label--${this.captionType}`\n\t\t\t: this.isLegend\n\t\t\t? 'ontario-fieldset__legend'\n\t\t\t: 'ontario-label';\n\t}\n\n\t/**\n\t * Validate caption input by user and output warning message to the console if:\n\t * 1. the `caption` object is not provided\n\t * 2. the `captionText` property of the `caption` object is not provided\n\t * 3. the `captionText` property of the `caption` object is empty or contain only spaces\n\t * 4. the `captionType` property of the `caption` object is not provided\n\t * 5. the `captionType` property of the `caption` object is incorrect\n\t */\n\tprivate validateCaption(caption?: InputCaption) {\n\t\tlet messageType;\n\n\t\t// undefined `caption` object\n\t\tif (!caption || Object.keys(caption).length <= 0) {\n\t\t\tmessageType = MessageContentType.UndefinedCaptionObject;\n\t\t} else {\n\t\t\t// undefined `captionText` property\n\t\t\tif (!caption.captionText) {\n\t\t\t\tmessageType = MessageContentType.UndefinedCaptionText;\n\t\t\t} else {\n\t\t\t\t// `captionText` that is empty or contains only spaces\n\t\t\t\tif (/^\\s*$/.test(caption.captionText)) {\n\t\t\t\t\tmessageType = MessageContentType.EmptyCaptionText;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// undefined `captionType`\n\t\t\tif (!caption.captionType) {\n\t\t\t\tmessageType = MessageContentType.UndefinedCaptionType;\n\t\t\t} else {\n\t\t\t\t// incorrect `captionType`\n\t\t\t\tif (!CaptionTypes.includes(caption?.captionType?.toLowerCase() as CaptionType)) {\n\t\t\t\t\tmessageType = MessageContentType.IncorrectCaptionType;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (messageType) {\n\t\t\tconst message = new ConsoleMessageClass().addDesignSystemTag();\n\n\t\t\tif (messageType !== MessageContentType.UndefinedCaptionObject) {\n\t\t\t\tmessage\n\t\t\t\t\t.addMonospaceText(\n\t\t\t\t\t\t` ${\n\t\t\t\t\t\t\tmessageType === MessageContentType.EmptyCaptionText ||\n\t\t\t\t\t\t\tmessageType === MessageContentType.UndefinedCaptionText\n\t\t\t\t\t\t\t\t? 'caption or captionText'\n\t\t\t\t\t\t\t\t: 'captionType'\n\t\t\t\t\t\t} `,\n\t\t\t\t\t)\n\t\t\t\t\t.addRegularText('object or property of');\n\t\t\t}\n\n\t\t\tmessage.addMonospaceText(' caption ').addRegularText('object on').addMonospaceText(` ${this.componentTagName} `);\n\t\t\tthis.printConsoleMessage(messageType, message, this.getRequiredFlagText());\n\t\t}\n\t}\n\n\t/**\n\t * Generate the content of warning message to be printed to the console\n\t * @param messageType determine the content of warning message to output\n\t * @param componentTagName the tag name of the component that's emitting the warning message\n\t * @param requiredFlagText accepts a string value to be used as the required flag text and defaults to `(optional)` if not set\n\t * @returns an array of `ConsoleMessage` objects containing the message and associated styles to be printed to the console\n\t */\n\tprivate printConsoleMessage(\n\t\tmessageType: MessageContentType,\n\t\tmessage: ConsoleMessageClass,\n\t\trequiredFlagText: string = '(optional)',\n\t) {\n\t\tswitch (messageType) {\n\t\t\t// undefinedCaptionObject example: caption object on <ontario-input> is required but not defined. A blank followed by a (optional) flag is assumed.\n\t\t\t// undefinedCaptionText example: captionText property of caption object on <ontario-input> is required but not defined. A blank followed by a (optional) flag is assumed.\n\t\t\t// EmptyCaptionText example: captionText property of caption object on <ontario-input> is empty or contains only spaces. A blank followed by a (optional) flag is assumed.\n\t\t\tcase MessageContentType.UndefinedCaptionObject:\n\t\t\tcase MessageContentType.UndefinedCaptionText:\n\t\t\tcase MessageContentType.EmptyCaptionText:\n\t\t\t\tmessage\n\t\t\t\t\t.addRegularText(\n\t\t\t\t\t\t`${\n\t\t\t\t\t\t\tmessageType === MessageContentType.EmptyCaptionText\n\t\t\t\t\t\t\t\t? 'is empty or contains only spaces'\n\t\t\t\t\t\t\t\t: 'is required but not defined'\n\t\t\t\t\t\t}. A blank followed by a`,\n\t\t\t\t\t)\n\t\t\t\t\t.addMonospaceText(` ${requiredFlagText} `)\n\t\t\t\t\t.addRegularText('flag is assumed.');\n\t\t\t\tbreak;\n\n\t\t\t// UndefinedCaptionType example: captionType property of caption object on <ontario-input> is not defined. The default type is assumed.\n\t\t\tcase MessageContentType.UndefinedCaptionType:\n\t\t\t\tmessage.addRegularText('is not defined. The').addMonospaceText(' default ').addRegularText('type is assumed.');\n\t\t\t\tbreak;\n\n\t\t\t// IncorrectCaptionType example: captionType property of caption object on <ontario-input> was set to an incorrect type; only default, heading or large type is allowed. The default type is assumed.\n\t\t\tcase MessageContentType.IncorrectCaptionType:\n\t\t\t\tmessage\n\t\t\t\t\t.addRegularText('was set to an incorrect type; only')\n\t\t\t\t\t.addMonospaceText(' default, heading, ')\n\t\t\t\t\t.addRegularText('or')\n\t\t\t\t\t.addMonospaceText(' large ')\n\t\t\t\t\t.addRegularText('type is allowed. The')\n\t\t\t\t\t.addMonospaceText(' default ')\n\t\t\t\t\t.addRegularText('type is assumed.');\n\t\t\t\tbreak;\n\t\t}\n\n\t\tmessage.printMessage();\n\t}\n}\n"]}