{"version":3,"file":"common.interface.js","sourceRoot":"","sources":["../../../src/utils/common/common.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Language } from './language-types';\nimport { InputInteractionEvent, InputFocusBlurEvent } from '../events/event-handler.interface';\nimport { EventEmitter } from '@stencil/core';\n\nexport interface Base {\n\t/**\n\t * The unique identifier of the element. This is optional - if no ID is passed, one will be generated.\n\t */\n\telementId?: string;\n\n\t/**\n\t * Returns the unique identifier.\n\t */\n\tgetId?: () => string;\n\n\t/**\n\t * Stencil API that doesn't return anything. Implementation is optional.\n\t */\n\tcomponentWillLoad?: () => void;\n\n\t/**\n\t * Returns the HTML code to be rendered into a custom element.\n\t */\n\trender?: () => object;\n}\n\nexport interface Input extends Base {\n\t/**\n\t * The name assigned to the element. The name value is used to reference form data after a form is submitted.\n\t */\n\tname: string;\n\n\t/**\n\t * Used to define whether the input field is required or not.\n\t */\n\trequired?: boolean;\n\n\t/**\n\t * The language of the component.\n\t * This is used for translations, and is by default set through event listeners checking for a language property from the header. If no language is passed, it will default to English.\n\t */\n\tlanguage?: Language;\n\n\t/**\n\t * The element content value.\n\t */\n\tvalue?: string;\n\n\t/**\n\t * Used to add a custom function to the input onChange event.\n\t */\n\tcustomOnChange?: (event: globalThis.Event) => void;\n\n\t/**\n\t * Used to add a custom function to the input onBlur event.\n\t */\n\tcustomOnBlur?: (event: globalThis.Event) => void;\n\n\t/**\n\t * Used to add a custom function to the input onFocus event.\n\t */\n\tcustomOnFocus?: (event: globalThis.Event) => void;\n\n\t/**\n\t * Emitted when a keyboard input or mouse event occurs when an input has been changed.\n\t */\n\tinputOnChange: EventEmitter<InputInteractionEvent>;\n\n\t/**\n\t * Emitted when a keyboard input event occurs when an input has lost focus.\n\t */\n\tinputOnBlur: EventEmitter<InputFocusBlurEvent>;\n\n\t/**\n\t * Emitted when a keyboard input event occurs when an input has gained focus.\n\t */\n\tinputOnFocus: EventEmitter<InputFocusBlurEvent>;\n}\n\nexport interface Hint extends Base {\n\t/**\n\t * The content type of the hint.\n\t * If no prop is passed, it will default to a string.\n\t * If the hint requires multiple lines or HTML, the `hintContentType` prop should be set to `html`.\n\t */\n\thintContentType?: 'string' | 'html';\n\n\t/**\n\t * Text to display as the hint text statement.\n\t *\n\t * Setting the hint can be done using the element content or setting the\n\t * this property.  This property will take precedence.\n\t */\n\thint: string;\n}\n\nexport type HintContentType = 'string' | 'html';\n"]}